============================
How to use 0-add-_integer.py
============================

This module defines an integer addition function `add_integer(a, b=98)`.

Usage
=====

`add_integer(...)` returns the addition of its two arguments. For numbers,
that value is equivalent to using the `+` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function also works with floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

Note. Floats are casted to ints before addition

::

    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating can be combined.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional, by default its 98.

::

    >>> add_integer(2)
    100

For Non-Numbers
===============

`add_integer()` expects both arguments to be integer or floats,
if neither is, a TypeError is raised:

::

    >>> add_integer("hy", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hy")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are not integers and not floats, TypeError message is only
printed for the first argument,

::

    >>> add_integer("hy", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Function will fail if infinity is provided

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Thesame with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
